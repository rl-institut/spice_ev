~~~~~~~~~~~~~~~
Getting started
~~~~~~~~~~~~~~~

SpiceEV is a tool to generate scenarios of electric-vehicle fleets and simulate different charging strategies.


Documentation
=============

Full documentation can be found `here <https://spice_ev.readthedocs.io/en/latest/>`_

Installing SpiceEV
===================

You can clone the current repository of SpiceEV to your local machine using:

.. code:: bash

	git clone https://github.com/rl-institut/spice_ev

This tool just has an optional dependency on Matplotlib for plotting, an optional dependency on sphinx for the documentation and an optional dependency on pytest for testing. Everything else uses the Python (>= 3.6) standard library.


General concept
===============

SpiceEV is a tool to simulate different charging strategies for a defined set of vehicles and corresponding trips to and from charging stations. The output shows load profiles of the vehicle battery, the
corresponding charging station, the grid connector as well as the electricity price and, if applicable, the stationary batteries. Each vehicle is by default connected to a separate charging station.
All charging stations of one location can be connected to one grid connector with a defined maximum power. Some charging strategies only allow for one grid connector, please check  :ref:`charging strategies <charging_strategies>` for more information.\

The input of SpiceEV is given by a `scenario.json` file. The `scenario.json` contains information about the vehicles and their specific attributes (e.g. battery capacity, charging curve, etc.) as well
as their trips from and to a specific charging station (so called vehicle events). Further, the charging stations attributes, such as its maximum power, the attached grid connector and the according electricity pricing are defined. Depending on the scenario, a certain
foresight can be applied for grid_operator_signals. If applicable, stationary batteries at the grid connectors with according capacities and c_rates can be defined.
External load profiles or feed in time series attached to a grid connector can be imported from csv files.
The input `scenario.json` file can be generated by one of the generate scripts. See :ref:`generate <generate>` for further details.


First steps
===========
Run SpiceEV
-----------

In order to run a simulation with SpiceEV you need to first generate your `scenario.json`, which then serves as the input for your simulation. There are several exemplary :ref:`generate <generate>` -scripts where you can,
e.g. generate trips for certain vehicles by random functions or load your vehicle schedules from a csv file. For now we use the `generate.py` script to create random trips for a number of predefined vehicles. Vehicles
should be defined in a `vehicle_type.json` and be added to your input arguments. See `examples/vehicle_types.json` for some exemplary vehicles.
You can define your input arguments in the command line or open a config file (e.g. `examples/generate.cfg`) to set your variables. For an overview over all command line options see chapter :ref:`command line options <command_line_options>`.

In order to generate a 7-day scenario with 10 cars of different types and 15 minute timesteps with command line options, type:

.. code:: bash

    ./generate.py --days 7 --cars 6 golf --cars 4 sprinter --interval 15 --vehicle-types examples/vehicle_types.json  scenario.json

In order to generate a scenario with input arguments from a config file type:

.. code:: bash

    ./generate.py --config ./examples/generate.cfg


Now that you have created your first scenario, you can run a simulation. You need to define the path to the input scenario.json and the charging strategy you want to use.
In this case we use the greedy strategy and set `--visual` to plot the results.

.. code:: bash

    ./simulate.py scenario.json --strategy greedy --visual

Again, you can alternatively define the input arguments in a config file, as in `examples/simulate.cfg`:

.. code:: bash

    ./simulate.py --config ./examples/simulate.cfg


Generate prices
---------------
In the case above, the generate function created electricity prices based on random values. If you only want to create
a price time series based on random values ahead (which could be useful for other generate scripts, that do not automatically generate random prices), you can run the following gernerate script:

.. code:: bash

    ./generate_energy_price.py price.csv

This generates a csv time series with electricity prices. You can then add this time series as an input to your `generate.py`:

.. code:: bash

    ./generate.py --include-price-csv price.csv example.json

Please note that included file paths are relative to the scenario file location. Consider this directory structure:

.. code:: bash

    ├── scenarios
    │   ├── price
    │   │   ├── price.csv
    │   ├── my_scenario
    │   │   ├── external_load.csv
    │   │   ├── example.json

Generate grid operator schedules
--------------------------------

If you want to generate a grid operator schedule from an input csv and include it to an existing scenario.json, you can do this by running `generate_schedule.py`:

.. code:: bash

    ./generate_schedule.py --scenario example.json --input data/timeseries/NSM_1.csv --output data/schedules/NSM_1.csv

In this case a csv time series is read in from the folder `data/timeseries/` and the created schedule is saved in `data/schedules/`. The schedule csv is automatically added to the json `example.json`.
Note that when running the `generate_schedule.py` module, you need to already have an existing scenario.json that you want to add the schedule to.

Include other csv time series
-----------------------------

You can also include your previously generated or already existing price time series and additional external load and/or feed in time series to your input arguments when generating the scenario.json. See :ref:`Input and output file formats <file_formats>`
for more information on the file formats of the input files.

.. code:: bash

    ./generate.py --include-price-csv ../price/price.csv --include-ext-load-csv external_load.csv example.json

SimBEV integration
------------------

This tools supports scenarios generated by the [SimBEV](https://github.com/rl-institut/simbev) tool.
In oder to convert SimBEV output files to a SpiceEV scenario, use:

.. code:: bash

    generate_from_simbev.py --simbev /path/to/simbev/output/ example.json

Help
----
In order to show all command line options type:

.. code:: bash

    ./generate -h
    ./simulate.py -h


As said above, there are also example configuration files in the example folder.

.. code:: bash

    ./generate.py --config examples/generate.cfg examples/example.json
    ./simulate.py --config examples/simulate.cfg examples/example.json



License
=======
